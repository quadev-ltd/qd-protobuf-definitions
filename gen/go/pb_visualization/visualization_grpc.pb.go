// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/visualization/visualization.proto

package pb_visualization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VisualizationService_ProcessImageAndPrompt_FullMethodName = "/src.pb.VisualizationService/ProcessImageAndPrompt"
)

// VisualizationServiceClient is the client API for VisualizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisualizationServiceClient interface {
	ProcessImageAndPrompt(ctx context.Context, in *ImagePromptRequest, opts ...grpc.CallOption) (*ImagePromptResponse, error)
}

type visualizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisualizationServiceClient(cc grpc.ClientConnInterface) VisualizationServiceClient {
	return &visualizationServiceClient{cc}
}

func (c *visualizationServiceClient) ProcessImageAndPrompt(ctx context.Context, in *ImagePromptRequest, opts ...grpc.CallOption) (*ImagePromptResponse, error) {
	out := new(ImagePromptResponse)
	err := c.cc.Invoke(ctx, VisualizationService_ProcessImageAndPrompt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisualizationServiceServer is the server API for VisualizationService service.
// All implementations must embed UnimplementedVisualizationServiceServer
// for forward compatibility
type VisualizationServiceServer interface {
	ProcessImageAndPrompt(context.Context, *ImagePromptRequest) (*ImagePromptResponse, error)
	mustEmbedUnimplementedVisualizationServiceServer()
}

// UnimplementedVisualizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVisualizationServiceServer struct {
}

func (UnimplementedVisualizationServiceServer) ProcessImageAndPrompt(context.Context, *ImagePromptRequest) (*ImagePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessImageAndPrompt not implemented")
}
func (UnimplementedVisualizationServiceServer) mustEmbedUnimplementedVisualizationServiceServer() {}

// UnsafeVisualizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisualizationServiceServer will
// result in compilation errors.
type UnsafeVisualizationServiceServer interface {
	mustEmbedUnimplementedVisualizationServiceServer()
}

func RegisterVisualizationServiceServer(s grpc.ServiceRegistrar, srv VisualizationServiceServer) {
	s.RegisterService(&VisualizationService_ServiceDesc, srv)
}

func _VisualizationService_ProcessImageAndPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualizationServiceServer).ProcessImageAndPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisualizationService_ProcessImageAndPrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualizationServiceServer).ProcessImageAndPrompt(ctx, req.(*ImagePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VisualizationService_ServiceDesc is the grpc.ServiceDesc for VisualizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisualizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "src.pb.VisualizationService",
	HandlerType: (*VisualizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessImageAndPrompt",
			Handler:    _VisualizationService_ProcessImageAndPrompt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/visualization/visualization.proto",
}
